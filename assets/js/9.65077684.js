(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{344:function(t,e,n){"use strict";n.r(e);var v=n(33),r=Object(v.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"js精度问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#js精度问题"}},[t._v("#")]),t._v(" JS精度问题")]),t._v(" "),n("blockquote",[n("p",[t._v("我们大家都知道,JS有个很经典的浮点运算精度丢失问题,今天我们就来聊一聊这个问题产生的原因,以及该如何去解决它呢?")])]),t._v(" "),n("p",[t._v("先来看下面的代码,0.1+0.2的结果不等于0.3,这是不是超出了我们之前的认知呢?毕竟0.1+0.2=0.3可是我们小学就已经学会了的东西,到这里怎么就不一样了呢?")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("0.1 + 0.2  //0.30000000000000004\n")])])]),n("p",[t._v("下面让我们先来了解它是如何产生的,然后再去解决它.")]),t._v(" "),n("h2",{attrs:{id:"为什么产生"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么产生"}},[t._v("#")]),t._v(" 为什么产生")]),t._v(" "),n("p",[t._v("首先,我们要知道数字在计算机中是如何存储和运行的?在计算机中,数字无论是定点数还是浮点数都是以多位二进制的方式进行存储.js采用IEEE 754的双精度标准进行存储,这是一种64位双精度浮点数储存方法.其中"),n("code",[t._v("1")]),t._v("位表示符号位,有正负,0为正,1为负;"),n("code",[t._v("11")]),t._v("位用来表示指数,剩下的"),n("code",[t._v("52")]),t._v("位表示尾数.\n它的表示格式为:\n"),n("code",[t._v("(s) * (m) * (2 ^ e)")]),t._v("\ns为符号位,m为尾数,e为指数.")]),t._v(" "),n("p",[t._v("ES6在"),n("code",[t._v("Number")]),t._v("对象上新增了一个极小的常量"),n("code",[t._v("Number.EPSILON")]),t._v(".根据规格,它表示1与大于1的最小浮点数之间的差.我们在控制台打印出它的结果,可以看到")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Number.EPSILON //2.220446049250313e-16\n")])])]),n("p",[t._v("前面说到了64位浮点数中有52位是表示精度,那么比1大的最小浮点数应该就是"),n("code",[t._v("1.000..001")]),t._v(",这里小数点后面有51个0,然后1个1.这个数减去1的结果就是2的-52次方,也就是"),n("code",[t._v("Math.pow(2,-52)")]),t._v(",所以下面的结果会输出"),n("code",[t._v("true")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Number.EPSILON === Math.pow(2,-52)  //true\n")])])]),n("p",[t._v("所以,我们可以认为 "),n("code",[t._v("Number.EPSILON")]),t._v("是JS中能够表示的最小精度.当误差小于这个值的时候,就已经没有意义了,可以认为此时误差已经不存在了.即如果两个浮点数之间的差小于"),n("code",[t._v("Number.EPSILON")]),t._v(",则我们认为这两个浮点数是相等的.\n回过头来,我们来计算一下0.1+0.2为啥不等于0.3?\n将十进制的小数转换为二进制的小数,我们采用的是"),n("code",[t._v("乘2取整法")]),t._v(".即将小数部分乘以2,然后取整数部分,剩下的小数部分继续乘以2,然后取整数部分,剩下的小数部分又乘以2,一直取到小数部分为零为止.")]),t._v(" "),n("p",[t._v("我们先将0.1转换成二进制,其结果为"),n("code",[t._v("0.000110011..001")]),t._v("其中小数部分从第2位开始就是0011一直循环.我们看似有穷的一个小数0.1,其实在计算机中是无穷的.由于存储空间有限,计算机会舍弃掉后面的数值.\n我们再将0.2转换成二进制,其结果为"),n("code",[t._v("0.00110011..001")]),t._v("其中小数部分从第1位开始就是0011一直循环.\n在这里提供一个在线进制转换的网址"),n("a",{attrs:{href:"https://tool.oschina.net/hexconvert/",target:"_blank",rel:"noopener noreferrer"}},[t._v("戳我"),n("OutboundLink")],1),t._v(".\n然后我们用js中的IEEE 754 双精度64位浮点数表示法来展示0.1和0.2,其结果为:")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("十进制小数")]),t._v(" "),n("th",[t._v("指数e")]),t._v(" "),n("th",[t._v("尾数m")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("0.1")]),t._v(" "),n("td",[t._v("-4")]),t._v(" "),n("td",[t._v("1.1001100110011001100110011001100110011001100110011010(52位)")])]),t._v(" "),n("tr",[n("td",[t._v("0.2")]),t._v(" "),n("td",[t._v("-3")]),t._v(" "),n("td",[t._v("1.1001100110011001100110011001100110011001100110011010(52位)")])])])]),t._v(" "),n("p",[t._v("然后,我们把他们相加,这里指数不一样的话,我们选择右移,因为损失的精度小.")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("十进制小数")]),t._v(" "),n("th",[t._v("指数e")]),t._v(" "),n("th",[t._v("尾数m")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("0.1")]),t._v(" "),n("td",[t._v("-3")]),t._v(" "),n("td",[t._v("0.1100110011001100110011001100110011001100110011001101(52位)")])]),t._v(" "),n("tr",[n("td",[t._v("0.2")]),t._v(" "),n("td",[t._v("-3")]),t._v(" "),n("td",[t._v("1.1001100110011001100110011001100110011001100110011010(52位)")])]),t._v(" "),n("tr",[n("td"),t._v(" "),n("td",[t._v("-3")]),t._v(" "),n("td",[t._v("10.0110011001100110011001100110011001100110011001100111 (52位)")])])])]),t._v(" "),n("p",[n("code",[t._v("e=-3;m=0.1100110011001100110011001100110011001100110011001101(52位)")]),t._v("+\n"),n("code",[t._v("e=-3;m=1.1001100110011001100110011001100110011001100110011010(52位)")]),t._v("\n结果是:\n"),n("code",[t._v("e=-3;m=10.0110011001100110011001100110011001100110011001100111 (52位)")]),t._v(" 即:\n"),n("code",[t._v("e=-2;m=1.00110011001100110011001100110011001100110011001100111 (53位)")])]),t._v(" "),n("p",[t._v("可以看到,这时尾数已经有53位了,我们采用一个叫"),n("code",[t._v("round to nearest, tie to even")]),t._v(" 四舍五入的方式.它的意思就是接近哪个取哪个,一样的时候取偶数.举个例子:1.0101保留3位小数,那么它可以是1.010和1.011,此时取哪个,取偶数1.010.所以,这里"),n("code",[t._v("e=-2;m=1.00110011001100110011001100110011001100110011001100111 (53位)")]),t._v("转换为"),n("code",[t._v("e=-2;m=1.0011001100110011001100110011001100110011001100110100 (52位)")]),t._v(",其二进制小数表示法就是"),n("code",[t._v("0.010011001100110011001100110011001100110011001100110100")]),t._v(",我们再将其展示为十进制的小数,结果为"),n("code",[t._v("0.30000000000000004")]),t._v(".此结果可以去上面提供的进制转换网站做验证.自此,我们就明白了为什么"),n("code",[t._v("0.1+0.2 != 0.3")]),t._v(".")]),t._v(" "),n("h2",{attrs:{id:"怎么解决"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#怎么解决"}},[t._v("#")]),t._v(" 怎么解决")]),t._v(" "),n("p",[t._v("既然已经知道了导致这个问题的原因,那么我们该如何解决呢?")]),t._v(" "),n("h3",{attrs:{id:"使用函数库"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用函数库"}},[t._v("#")]),t._v(" 使用函数库")]),t._v(" "),n("p",[t._v("常见的函数库,比如"),n("a",{attrs:{href:"https://www.npmjs.com/package/decimal.js/v/10.0.0",target:"_blank",rel:"noopener noreferrer"}},[t._v("decimal.js"),n("OutboundLink")],1),t._v("等就可以解决这个问题")]),t._v(" "),n("h3",{attrs:{id:"自己写函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自己写函数"}},[t._v("#")]),t._v(" 自己写函数")]),t._v(" "),n("p",[t._v("知道了问题出在哪儿,我们也就有了解决思路.通常我们的做法是将浮点数变成整数来计算,然后再确定小数点的位置,下面的加法函数就实现了我们想要的结果.")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function add(num1, num2){\n  let r1, r2, m;\n  try{\n    r1 = num1.toString().split('.')[1].length\n  }catch(e){\n    r1 = 0\n  }\n  try{\n    r2 = num2.toString().split('.')[1].length\n  }catch(e){\n    r2 = 0\n  }\n  m = Math.pow(10, Math.max(r1, r2))\n  return (num1 * m + num2 * m) / m\n}\n")])])]),n("p",[t._v("相类似的, 还有减乘除的函数,我们也一并展示在下面:")]),t._v(" "),n("p",[n("strong",[t._v("减法函数:")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function sub(num1, num2){\n  let r1, r2, m, n;\n  try{\n    r1 = num1.toString().split('.')[1].length\n  }catch(e){\n    r1 = 0\n  }\n  try{\n    r2 = num2.toString().split('.')[1].length\n  }catch(e){\n    r2 = 0\n  }\n  n = Math.max(r1, r2)\n  m = Math.pow(10, n)\n  return Number(((num1 * m - num2 * m) / m).toFixed(n))\n}\n\n")])])]),n("p",[n("strong",[t._v("乘法函数:")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function multiply(num1, num2){\n  let m = 0,\n  s1 = num1.toString(),\n  s2 = num2.toString()\n  try {\n    m += s1.split('.')[1].length\n  }catch(e){}\n  try {\n    m += s2.split('.')[1].length\n  }catch(e){}\n  return Number(s1.replace('.','')) * Number(s2.replace('.','')) / Math.pow(10,m)\n}\n\n")])])]),n("p",[n("strong",[t._v("除法函数:")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function divide(num1, num2){\n  let t1,t2,r1,r2;\n  try {\n    t1 = num1.toString().split('.')[1].length\n  }catch(e){\n    t1 = 0\n  }\n  try {\n    t2 = num2.toString().split('.')[1].length\n  }catch(e){\n    t2 = 0\n  }\n  r1 = Number(num1.toString().replace('.',''))\n  r2 = Number(num2.toString().replace('.',''))\n  return (r1 / r2) * Math.pow(10, t2 - t1)\n}\n")])])]),n("p",[t._v("以上的这些函数分别可以解决加减乘除精度显示的问题.")])])}),[],!1,null,null,null);e.default=r.exports}}]);