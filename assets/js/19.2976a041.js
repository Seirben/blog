(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{339:function(e,o,s){"use strict";s.r(o);var t=s(33),_=Object(t.a)({},(function(){var e=this,o=e.$createElement,s=e._self._c||o;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"一文搞懂exports和module-exports的关系和区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一文搞懂exports和module-exports的关系和区别"}},[e._v("#")]),e._v(" 一文搞懂exports和module.exports的关系和区别")]),e._v(" "),s("blockquote",[s("p",[e._v("我们知道NodeJS遵循 "),s("code",[e._v("CommonJS")]),e._v(" 的规范,使用"),s("code",[e._v("require")]),e._v("关键字来加载模块,使用 "),s("code",[e._v("exports")]),e._v(" 和 "),s("code",[e._v("module.exports")]),e._v(" 来导出模块,那么这两个导出又有什么关系或者区别呢?")])]),e._v(" "),s("p",[e._v("其实,在node执行一个文件时,会给这个文件内生成一个 "),s("code",[e._v("exports")]),e._v(" 对象和一个 "),s("code",[e._v("module")]),e._v("    对象,而这个"),s("code",[e._v("module")]),e._v(" 对象又有一个属性叫做 "),s("code",[e._v("exports")])]),e._v(" "),s("p",[e._v("新建一个index.js文件 执行 "),s("code",[e._v("node index.js")]),e._v("   命令")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("console.log(exports)\nconsole.log(module)\n")])])]),s("p",[e._v("可以看出控制台的输出结果如下:\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200302152831257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vZ3V6aGFsZQ==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),e._v("\n我们再来看看 "),s("code",[e._v("exports")]),e._v(" 和 "),s("code",[e._v("module.exports")]),e._v(" 有什么关系呢?\n我们在index.js 文件中添加一句代码")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("console.log(exports === module.exports)\n")])])]),s("p",[e._v("会发现结果是 "),s("code",[e._v("true")]),e._v(" 这说明,文件开始执行的时候,它们是指向同一块内存区域的\n"),s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/3/3/1709df85ab1f6fd6?w=412&h=180&f=png&s=8444",alt:""}})]),e._v(" "),s("p",[e._v("当文件执行完毕的时候,只有"),s("code",[e._v("module.exports")]),e._v(" 变量被返回了,以便后续被其他模块 "),s("code",[e._v("require")]),e._v(" 引用,为了证明这个观点,我们可以新建一个文件 index2.js 进行测试")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//index2.js\nexports.a = 1\n")])])]),s("p",[e._v("然后在 index3.js 中引用")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//index3.js\nconst module2 = require('./index2')\nconsole.log(module2)\n")])])]),s("p",[e._v("控制台输出:  "),s("code",[e._v("{ a: 1 }")]),e._v("\n然后我们在 index2.js 中添加代码:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//index2.js\nexports.a = 1\nmodule.exports = {\n  b:2\n}\n")])])]),s("p",[e._v("在这里同时使用两个导出方法,查看控制台输出结果为 "),s("code",[e._v("{ b: 2 }")]),e._v("\n此时,我们继续在 index2.js 文件中添加")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("console.log(exports === module.exports)\n")])])]),s("p",[e._v("结果为"),s("code",[e._v("false")]),e._v(",此时的 "),s("code",[e._v("exports")]),e._v(" 和 "),s("code",[e._v("module.exports")]),e._v(" 已经不是指向同一块内存地址了,因为前面的代码里面,我们使用了")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("module.exports = {\n  b:2\n}\n")])])]),s("p",[e._v("这导致了 "),s("code",[e._v("module.exports")]),e._v("重新指向了新的内存地址, 但是当我们执行 "),s("code",[e._v("node index3.js")]),e._v(" 查看index3.js 的运行结果时,看到的是 "),s("code",[e._v("{b:2}")]),e._v(" 而不是 "),s("code",[e._v("{a:1}")]),e._v(" 证明了我们上面的观点: 只有"),s("code",[e._v("module.exports")]),e._v(" 变量被返回了\n因此,初始化的状态,我们可以用如下代码来帮助理解:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var module = {\n    exports:{}\n}\nvar exports = module.exports\n")])])]),s("p",[e._v("而最终的导出结果是 "),s("code",[e._v("module.exports")]),e._v(" 这个对象.\n到了这里,可能有人又会有疑问,为啥之前很多的模块都是需要引入才能使用,但是"),s("code",[e._v("exports")]),e._v("和"),s("code",[e._v("module.exports")]),e._v(" 我们没有引用却能直接使用?\n这个问题的答案我们可以从Node的官方文档中找到答案, "),s("a",{attrs:{href:"https://nodejs.org/dist/latest-v13.x/docs/api/modules.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("传送门在此"),s("OutboundLink")],1),e._v(" "),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200302162045507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vZ3V6aGFsZQ==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),e._v(" "),s("p",[e._v("这里,Node的官方文档里面提到, NodeJS 应用在文件被执行前会被包装一层:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("(function(exports,require,module,__filename,__dirname){\n  ...\n})\n")])])]),s("p",[e._v("在进行了头尾封装后,各模块之间进行了作用域的隔离,避免了污染全局变量,通过头尾封装,实现了")]),e._v(" "),s("blockquote",[s("ul",[s("li",[e._v("保持顶层变量（用 var、 const 或 let 定义）作用在模块范围内，而不是全局对象。")]),e._v(" "),s("li",[e._v("提供一些看似全局的但实际上是模块特定的变量\n+ 实现了从模块中导出值的 module 和 exports 对象\n+ 包含模块绝对文件名(__filename)和目录路径(__dirname)的快捷变量")])])]),e._v(" "),s("p",[s("strong",[e._v("总结:")])]),e._v(" "),s("ol",[s("li",[s("code",[e._v("exports")]),e._v(" 对象是 "),s("code",[e._v("module")]),e._v(" 对象的一个属性,在初始时 "),s("code",[e._v("module.exports")]),e._v(" 和 "),s("code",[e._v("exports")]),e._v(" 指向同一块内存区域")]),e._v(" "),s("li",[e._v("模块导出的是 "),s("code",[e._v("module.exports")]),e._v(" , "),s("code",[e._v("exports")]),e._v(" 只是对它的引用,在不改变"),s("code",[e._v("exports")]),e._v(" 内存的情况下,修改"),s("code",[e._v("exports")]),e._v(" 的值可以改变 "),s("code",[e._v("module.exports")]),e._v(" 的值")]),e._v(" "),s("li",[e._v("导出时尽量使用 "),s("code",[e._v("module.exports")]),e._v(" ,以免因为各种赋值导致的混乱")])])])}),[],!1,null,null,null);o.default=_.exports}}]);